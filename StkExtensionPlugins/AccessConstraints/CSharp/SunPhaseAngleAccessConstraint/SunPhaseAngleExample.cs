//=====================================================//
//  Copyright 2006-2007, Analytical Graphics, Inc.     //
//=====================================================//

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using AGI.Plugin;
using AGI.STK.Plugin;
using AGI.STKObjects;
using System.Windows;
using AGI.Attr;

namespace AGI.Access.Constraint.Plugin.Examples.CSharp.SunPhaseAngleExample
{
	/// <summary>
	/// SunPhaseAngleExample uses the sun-object-observer angle between objects
	/// as its metric. 
	/// 
	/// This constraint is registered for:
	///		
	///		Facility to Satellite
	///		
	/// </summary>
	// NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    [Guid("400CACAC-6E7F-4D8D-9E5A-EB566BD4A608")]
	// NOTE: Create your own ProgId to match your plugin's namespace and name
	[ProgId("AGI.Access.Constraint.Plugin.Examples.CSharp.SunPhaseAngleExample")]
	// NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
	// you created is used instead of an autogenerated COM Interface.
	[ClassInterface(ClassInterfaceType.None)]
	public class SunPhaseAngleExample : ISunPhaseAngleExample, IAgAccessConstraintPlugin, IAgUtPluginConfig
	{
		#region Data Members
		private string				m_DisplayName = "CSharp.SunPhaseAngleExample";
		private IAgUtPluginSite		m_Site;
        private object m_agAttrBuilder;
        private bool useEquatorialAngle;
	    public bool UseEquatorialAngle
	    {
	        get 
            {  
                return useEquatorialAngle;
	        }
	        set
	        {
	            useEquatorialAngle = value;
	        } 
        }
	    
		#endregion
		
		public SunPhaseAngleExample()
		{
		    m_agAttrBuilder = null;
		    m_Site = null;
            useEquatorialAngle = true;
            Debug.WriteLine(  m_DisplayName+".SunPhaseAngleExample()", "Entered:" );
			Debug.WriteLine(  m_DisplayName+".SunPhaseAngleExample()", "Exited:" );
		}

		private void Message(AgEUtLogMsgType severity, string msg)
		{
			if(m_Site != null)
			{
				m_Site.Message( severity, msg );
			}
		}
		
		#region IAgAccessConstraintPlugin implementation
		public string DisplayName
		{
			get
			{
				return m_DisplayName;
			}
		}

		public void Register( AgAccessConstraintPluginResultRegister Result )
		{
			Result.BaseDependency = (int)AgEAccessConstraintDependencyFlags.eDependencyRelativePosVel;
			Result.Dimension = "Angle";	
			Result.MinValue = 0.0;
			Result.TargetDependency = (int)AgEAccessConstraintDependencyFlags.eDependencyRelativePosVel;
			Result.BaseObjectType = AgEAccessConstraintObjectType.eFacility;
			Result.ClearTargets();
			Result.AddTarget(AgEAccessConstraintObjectType.eSatellite);	
			Result.Register();
			Result.Message(AgEUtLogMsgType.eUtLogMsgInfo, 
				m_DisplayName+": Register(Facility to Satellite)");
		}

        #endregion

		public bool Init( IAgUtPluginSite site )
		{
			Debug.WriteLine(  m_DisplayName+".Init()", "Entered:" );

			m_Site = site;
			Message( AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName+": Init()" );
            
			Debug.WriteLine(  m_DisplayName+".Init()", "Exited:" );

			return true;
		}

		public bool PreCompute( AgAccessConstraintPluginResultPreCompute Result )
		{
			Debug.WriteLine(  m_DisplayName+".PreCompute()", "Entered:" );

			Message( AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName+": PreCompute()" );

			Debug.WriteLine(  m_DisplayName+".PreCompute()", "Exited:" );

			return true;
		}

		public bool Evaluate( 
			AgAccessConstraintPluginResultEval Result, 
			AgAccessConstraintPluginObjectData fromObject, 
			AgAccessConstraintPluginObjectData toObject )
		{
			if(Result != null)
			{
			    var satToSun = new double[] {0, 0, 0};
			    var satToFac = new double[] {0, 0, 0};
                toObject.ApparentSunPosition(AgEUtFrame.eUtFrameFixed, ref satToSun[0], ref satToSun[1], ref satToSun[2]);
			    toObject.RelativePosition(AgEAccessApparentPositionType.eLightPathApparentPosition,
			        AgEUtFrame.eUtFrameFixed, ref satToFac[0], ref satToFac[1], ref satToFac[2]);
			    if (useEquatorialAngle)
			    {
			        satToFac[2] = 0;
			        satToSun[2] = 0;
			    }
                Result.Value = AngleBetween(satToSun, satToFac);
			}

			return true;
		}

        //returns angle between two vectors
        //input two vectors u and v
        //for 'returndegrees' enter true for an answer in degrees, false for radians
        double AngleBetween(double[] u, double[] v)
        {
            if (u.Length != v.Length)
            {
                throw new Exception("Can not compute crossproduct with vectors of different lengths");
            }
            double toppart = 0;
            for (int d = 0; d < 3; d++) toppart += u[d] * v[d];

            double u2 = 0; //u squared
            double v2 = 0; //v squared
            for (int d = 0; d < 3; d++)
            {
                u2 += u[d] * u[d];
                v2 += v[d] * v[d];
            }

            double bottompart = 0;
            bottompart = Math.Sqrt(u2 * v2);


           return Math.Acos(toppart / bottompart);
        }
		
		public bool PostCompute(AgAccessConstraintPluginResultPostCompute Result)
		{
			Debug.WriteLine(  m_DisplayName+".PostCompute()", "Entered:" );
		
			Message( AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName+": PostCompute()" );

			Debug.WriteLine(  m_DisplayName+".PostCompute()", "Exited:" );
			
			return true;
		}

		public void Free()
		{
			Debug.WriteLine(  m_DisplayName+".Free()", "Entered:" );

			Message( AgEUtLogMsgType.eUtLogMsgInfo, m_DisplayName+": Free()" );

			Debug.WriteLine(  m_DisplayName+".Free()", "Exited:" );

			m_Site = null;
		}

        public object GetPluginConfig(AgAttrBuilder builder)
        {
            if (m_agAttrBuilder == null)
            {
                m_agAttrBuilder = builder.NewScope();
                builder.AddBoolDispatchProperty(m_agAttrBuilder, "UseEquatorialAngle",
                    "Compute solar phase angle in equatorial plane", "UseEquatorialAngle",
                    (int)AgEAttrAddFlags.eAddFlagNone);
            }
            return m_agAttrBuilder;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult pPluginCfgResult)
        {
            pPluginCfgResult.Result = true;
            pPluginCfgResult.Message = "Ok";
        }
    }
}
//=====================================================//
//  Copyright 2006-2007, Analytical Graphics, Inc.     //
//=====================================================//